
### Project 2 - Show me the Data Structures

This file describes the time complexity of each task that makes up this
project. BigO Notation is used throughout.

[Complexity of Python Operations](https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt), and the [Big O notation](https://en.wikipedia.org/wiki/Big_O_notation) wiki page are used as references.

##### Task 1
Time Complexity : *O(1)* \
Space Complexity : *O(n)* \
I decided to use a *OrderedDict()* for this problem (which is an implementation of a hashmap), since it contains the *move_to_end()* and *popitem()* functions, the latter enabling me to add the *last=False* modifier to remove the item added most recently.
The time complexity here is O(1) since there are no loops, all operations happen in constant time.
Space complexity is O(n) since the queue size is configurable and dictates the space required.

##### Task 2
Time Complexity : *O(n)* \
Space Complexity : *O(n)* \
I decided to use recursion here, since the requirement is to handle folder structures of undetermined depth. The essence of the problem is to search until we have found all files, which recursion does well at addressing.
The time complexity is O(n) where n is the number of folders under the parent structure.
The space complexity is also O(n), since we maintain a variable of all files found.

##### Task 3
Time Complexity : *O(n)* \
Space Complexity : *O(n)* \
I decided to use a *min heap* for this problem, to enable more efficient merging of the frequency dict. The *heapq* library was used extensively for node operations.
The time complexity overall is O(n log n). While various operations are O(n) (like *make_frequency_dict()*, *make_heap()*, *decode()* etc), the *merge_nodes()* function is O(log n) resulting in overall O(n log n).
The space complexity is O(n), where n is the size of the input string.
##### Task 4
Time Complexity : *O(n)* \
Space Complexity : *O(1)* \
I decided to use recursion here again, since the problem involved searching within child groups of unknown depth.
The time complexity is O(n) where n is the number of groups and/or users, and we need to iterate through them.
The space complexity is O(1), we only store a single value.

##### Task 5
Time Complexity : *O(n)* \
Space Complexity : *O(1)* \
This Blockchain example only includes an *append()* function, neglecting to implement a *search()* or anything else.
The time complexity is O(1) to add a block to the tail of the linked list.
The space complexity is also O(1) since we only require a single variable.

##### Task 6
Time Complexity : O(n^2)
Space Complexity : O(n)
For this task, I decided to convert the *LinkLists* into plain *Lists* which are much easier to work with and complete this task efficiently.
The time complexity is O(n^2), because the *intersection()* function uses a nested *while* loop through each linked list. The *union()* function runs in O(n) since it uses two loops, one for each list. They are not nested though like *intersection()*, so it's O(n).
The space complexity is O(n) where n is the size of the input lists.
